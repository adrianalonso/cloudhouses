DomainGroupContent:
    type: object
    inherits:
        - DomainContentTypeGroup
    config:
        fields:
            _types:
                type: DomainGroupContentTypes
                resolve: {  }
            articles:
                type: ArticleContentConnection
                description: 'No description available'
                resolve: '@=resolver("SearchContentOfTypeAsConnection", ["article", args])'
                argsBuilder: 'Relay::Connection'
                args:
                    query: { type: ContentSearchQuery, description: 'A Content query used to filter results' }
                    sortBy: { type: '[SortByOptions]', description: 'A sort clause, or array of clauses. Add _desc after a clause to reverse it' }
            article:
                type: ArticleContent
                description: 'No description available'
                resolve: '@=resolver("DomainContentItem", [args, "article"])'
                args:
                    id: { type: Int, description: 'A article content id' }
                    remoteId: { type: String, description: 'A article content remote id' }
                    locationId: { type: Int, description: 'A article content location id' }
            folders:
                type: FolderContentConnection
                description: 'No description available'
                resolve: '@=resolver("SearchContentOfTypeAsConnection", ["folder", args])'
                argsBuilder: 'Relay::Connection'
                args:
                    query: { type: ContentSearchQuery, description: 'A Content query used to filter results' }
                    sortBy: { type: '[SortByOptions]', description: 'A sort clause, or array of clauses. Add _desc after a clause to reverse it' }
            folder:
                type: FolderContent
                description: 'No description available'
                resolve: '@=resolver("DomainContentItem", [args, "folder"])'
                args:
                    id: { type: Int, description: 'A folder content id' }
                    remoteId: { type: String, description: 'A folder content remote id' }
                    locationId: { type: Int, description: 'A folder content location id' }
            houses:
                type: HouseContentConnection
                description: 'House Content Type'
                resolve: '@=resolver("SearchContentOfTypeAsConnection", ["house", args])'
                argsBuilder: 'Relay::Connection'
                args:
                    query: { type: ContentSearchQuery, description: 'A Content query used to filter results' }
                    sortBy: { type: '[SortByOptions]', description: 'A sort clause, or array of clauses. Add _desc after a clause to reverse it' }
            house:
                type: HouseContent
                description: 'House Content Type'
                resolve: '@=resolver("DomainContentItem", [args, "house"])'
                args:
                    id: { type: Int, description: 'A house content id' }
                    remoteId: { type: String, description: 'A house content remote id' }
                    locationId: { type: Int, description: 'A house content location id' }
            houseMembers:
                type: HouseMemberContentConnection
                description: 'House Member Content Type'
                resolve: '@=resolver("SearchContentOfTypeAsConnection", ["house_member", args])'
                argsBuilder: 'Relay::Connection'
                args:
                    query: { type: ContentSearchQuery, description: 'A Content query used to filter results' }
                    sortBy: { type: '[SortByOptions]', description: 'A sort clause, or array of clauses. Add _desc after a clause to reverse it' }
            houseMember:
                type: HouseMemberContent
                description: 'House Member Content Type'
                resolve: '@=resolver("DomainContentItem", [args, "house_member"])'
                args:
                    id: { type: Int, description: 'A house_member content id' }
                    remoteId: { type: String, description: 'A house_member content remote id' }
                    locationId: { type: Int, description: 'A house_member content location id' }
